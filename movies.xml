<?xml version="1.0" encoding="UTF-8" ?>
<Module>
<!-- Licensed under the Apache License, Version 2.0 (the "License"); you may not
 * use this file except in compliance with the License. You may obtain a copy of
 * the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *	
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
 * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
 * License for the specific language governing permissions and limitations under
 * the License
-->
	<ModulePrefs title="Hangout Starter">
		<Require feature="rpc" />
		<Require feature="views" />
		<Require feature="locked-domain" />
	</ModulePrefs>
	<Content type="html"><![CDATA[     

<html>
<script src="//plus.google.com/hangouts/_/api/v1/hangout.js"></script>
<script type="text/javascript" src="https://www.dropbox.com/static/api/2/dropins.js" id="dropboxjs" data-app-key="zyys2sz808tigvj"></script>
<style type="text/css">
<!--
body {
  background-color: #181818;
  margin: 15px;
}
.button {
  border-radius: 3px;
  -moz-border-radius: 3px;
  background: -webkit-gradient(linear, left top, left bottom, from(#fff), to(#ddd));
  background: -moz-linear-gradient(top, #fff, #ddd);  
  border: 1px solid #bbb;
}

.button:active {
	background: -webkit-gradient(linear, left top, left bottom, from(#aaa), to(#333)); 
	background: -moz-linear-gradient(bottom, #ddd, #aaa); }

-->
</style>
<body>

<font color='#f0f0f0' size='7'>Hangouts <b>with Movies</b></font><br>
<font color='#f0f0f0'>Watch movies with your friends through G+ Hangouts and Dropbox.</font><br><br>
<font color="#f0f0f0">Choose the movie!</font><br>
<script type='text/javascript'>
  options = {

    // Required. Called when a user selects an item in the Chooser.
    success: function(files) {
        alert("Here's the file link: " + files[0].link)
    },

    // Optional. Called when the user closes the dialog without selecting a file
    // and does not include any parameters.
    cancel: function() {

    },

    // Optional. "preview" (default) is a preview link to the document for sharing,
    // "direct" is an expiring link to download the contents of the file. For more
    // information about link types, see Link types below.
    linkType: "preview", // or "direct"

    // Optional. A value of false (default) limits selection to a single file, while
    // true enables multiple file selection.
    multiselect: false, // or true

    // Optional. This is a list of file extensions. If specified, the user will
    // only be able to select files with these extensions. You may also specify
    // file types, such as "video" or "images" in the list. For more information,
    // see File types below. By default, all extensions are allowed.
    extensions: ['.pdf', '.doc', '.docx'],
};

file = {

    // Name of the file.
    name: "filename.txt",

    // URL to access the file, which varies depending on the linkType specified when the
    // Chooser was triggered.
    link: "https://...",

    // Size of the file in bytes.
    bytes: 464,

    // URL to a 64x64px icon for the file based on the file's extension.
    icon: "https://...",

    // A thumbnail URL generated when the user selects images and videos.
    // If the user didn't select an image or video, no thumbnail will be included.
    thumbnailLink: "https://...?bounding_box=75&mode=fit",
};

</script>
<input type='button' id='dp-chooser' onclick="javascript:Dropbox.choose(options);" value="Choose a movie!" />

<input type="dropbox-chooser" name="selected-file" id="db-chooser" data-link-type="direct"/>

<hr>

<script type="text/javascript" id="dropboxjs" data-app-key="bjsxv3fzq54dvpc">
if (!window.Dropbox) window.Dropbox = {};
Dropbox.baseUrl = "https://www.dropbox.com"; //Leave this here. :-)

(function() {
    var el, appKey;
    if ((el = document.getElementById('dropboxjs')) !== null) {
        if ((appKey = el.getAttribute('data-app-key')) !== null) {
            Dropbox.appKey = appKey;
        }
    }

    var css = document.createElement("style");
    css.type = "text/css";
    var cssText =
        ".dropbox-chooser { width: 152px; height: 25px; cursor: pointer;" +
                         " background: url('"+ Dropbox.baseUrl +"/static/images/widgets/chooser-button-sprites.png') 0 0}" +
        ".dropbox-chooser:hover { background-position: 0 -25px}" +
        ".dropbox-chooser:active { background-position: 0 -50px}" +
        ".dropbox-chooser-used { background-position: 152px 0 }" +
        ".dropbox-chooser-used:hover { background-position: 152px -25px}" +
        ".dropbox-chooser-used:active { background-position: 152px -50px}";
    if (css.styleSheet) {  // IE
        css.styleSheet.cssText = cssText;
    } else {
        css.textContent = cssText;
    }
    document.getElementsByTagName("head")[0].appendChild(css);

    var DOMContentLoaded = function() {
        var ieframe = document.createElement("iframe");
        ieframe.setAttribute("id", "dropbox_xcomm");
        ieframe.setAttribute("src", Dropbox.baseUrl + "/fp/xcomm");
        ieframe.style.display = 'none';
        document.getElementsByTagName("body")[0].appendChild(ieframe);
        Dropbox._ieframe = ieframe;

        if (document.removeEventListener) {
            document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
        } else if (document.readyState === "complete" && document.detachEvent) {
            // we're here because readyState === "complete" in oldIE
            // which is good enough for us to call the dom ready!
            document.detachEvent("onreadystatechange", DOMContentLoaded);
        }

        var nlist = document.getElementsByTagName("input");
        for(var b=0; b<nlist.length; b++) {
            el = nlist[b];
            if (el.getAttribute('type') == 'dropbox-chooser') {
                (function(el) {
                    var btn = document.createElement("div");
                    btn.className = "dropbox-chooser";
                    el.style.display = 'none';

                    Dropbox.addListener(btn, "click", function(evt) {
                        Dropbox.choose({
                            success: function(files) {
                                el.value = files[0].url;
                                el.files = files;

                                if( document.createEvent ) {
                                  var evObj = document.createEvent('Event');
                                  evObj.initEvent( 'DbxChooserSuccess', true, false );
                                  evObj.files = files;
                                  el.dispatchEvent( evObj );
                                }
                                btn.className = "dropbox-chooser dropbox-chooser-used";
                            },
                            cancel: function() {
                                if( document.createEvent ) {
                                    var event = document.createEvent("Event");
                                    event.initEvent("DbxChooserCancel", true, true);
                                    el.dispatchEvent(event);
                                }
                            },
                            linkType: el.getAttribute('data-link-type') ? el.getAttribute('data-link-type') : 'preview'
                        });
                    });
                    el.parentNode.insertBefore(btn, el);
                })(el);
            }
        }
    };

    if (document.readyState === "complete") {
        DOMContentLoaded();
    }
    if (document.addEventListener) {
        document.addEventListener("DOMContentLoaded", DOMContentLoaded, false);
    } else {
        document.attachEvent("onreadystatechange", DOMContentLoaded);
    }
})();

//Consider removing this in the future -CV
Dropbox.init = function(options) {
    this.appKey = options.appKey;
};

Dropbox.addListener = function(obj, event, handler) {
    if (obj.addEventListener) {
        obj.addEventListener(event, handler, false);
    } else {
        obj.attachEvent("on" + event, handler);
    }
};

Dropbox.removeListener = function(obj, event, handler) {
    if (obj.removeEventListener) {
        obj.removeEventListener(event, handler, false);
    } else {
        obj.detachEvent("on" + event, handler);
    }
};

Dropbox._chooserUrl = function(options) {
    var linkType = options.linkType == 'direct' ? 'direct' : 'preview'
    return this.baseUrl + "/chooser?origin=" + encodeURIComponent(window.location.protocol + "//" + window.location.host)
                        + "&app_key=" + encodeURIComponent(this.appKey)
                        + "&link_type=" + linkType;
};

Dropbox._createWidgetElement = function(options) {
    var widget = document.createElement("iframe");
    widget.src = this._chooserUrl(options);
    widget.style.display = "block";
    widget.style.width = "660px";
    widget.style.height = "440px";
    widget.style.backgroundColor = "white";
    widget.style.border = "none";
    return widget;
};

Dropbox._handleMessageEvent = function(evt, closefn, success, cancel) {
    var data = JSON.parse(evt.data);
    if (data.method == "files_selected") {
        if (closefn) closefn();
        if (success) setTimeout(function() { success([data.params]); }, 0);
    } else if (data.method == "close_dialog") {
        if (closefn) closefn();
        if (cancel) setTimeout(function() { cancel(); }, 0);
    }
};

Dropbox.createWidget = function(options) {
    var widget = Dropbox._createWidgetElement(options);
    widget._handler = function(evt) {
        if (evt.source == widget.contentWindow) {
            Dropbox._handleMessageEvent(evt, null, options.success, options.cancel);
        }
    };
    Dropbox.addListener(window, "message", widget._handler);
    return widget;
}

Dropbox.cleanupWidget = function(widget) {
    if (!widget._handler) throw "Invalid widget!";
    Dropbox.removeListener(window, "message", widget._handler);
    delete widget._handler;
}

Dropbox.choose = function(options) {
    if (typeof options == "undefined") {
        throw "You must pass in options";
    }
    if (options.iframe) {
        var widget = Dropbox._createWidgetElement(options);
        var outer = document.createElement("div");
        outer.style.position = "fixed";
        outer.style.left = outer.style.right = outer.style.top = outer.style.bottom = "0px";
        outer.style.zIndex = "1000";
        var bg = document.createElement("div");
        bg.style.position = "absolute";
        bg.style.left = bg.style.right = bg.style.top = bg.style.bottom = "0px";
        bg.style.backgroundColor = "rgb(160, 160, 160)";
        bg.style.opacity = "0.2";
        bg.style.filter = "progid:DXImageTransform.Microsoft.Alpha(Opacity=20)";  // IE8.
        var inner = document.createElement("div");
        inner.style.position = "relative";
        inner.style.width = "660px";
        inner.style.margin = "125px auto 0px auto";
        inner.style.border = "1px solid #ACACAC";
        inner.style.boxShadow = "rgba(0, 0, 0, .2) 0px 4px 16px";
        inner.appendChild(widget);
        outer.appendChild(bg);
        outer.appendChild(inner);
        document.body.appendChild(outer);

        var handler = function(evt) {
            if (evt.source == widget.contentWindow) {
                Dropbox._handleMessageEvent(evt, function() {
                    document.body.removeChild(outer);
                    Dropbox.removeListener(window, "message", handler);
                }, options.success, options.cancel);
            }
        };
        Dropbox.addListener(window, "message", handler);
    } else {
        var w = 660;
        var h = 440;
        var left = (window.screenX || window.screenLeft) + ((window.outerWidth || document.documentElement.offsetWidth) - w) / 2;
        var top = (window.screenY || window.screenTop) + ((window.outerHeight || document.documentElement.offsetHeight) - h) / 2;
        var popup = window.open(this._chooserUrl(options), "dropbox", "width=" + w + ",height=" + h + ",left=" + left + ",top=" + top + ",resizable=no,location=yes");
        var handler = function(evt) {
            if (evt.source == popup || evt.source == Dropbox._ieframe.contentWindow) {
                Dropbox._handleMessageEvent(evt, function() {
                    popup.close();
                    Dropbox.removeListener(window, "message", handler);
                }, options.success, options.cancel);
            }
        };
        Dropbox.addListener(window, "message", handler);
    }
};

Dropbox.attach = Dropbox.choose

</script>
</body>
]]>
</Content>
</Module>

